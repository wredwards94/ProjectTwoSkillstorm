// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Repository;

#nullable disable

namespace StarTelecom.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    [Migration("20240417191711_UserDeviceAddedUserId")]
    partial class UserDeviceAddedUserId
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Entities.Billing", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("BillingDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("bit");

                    b.Property<string>("PaymentMethod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserPlanId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserPlanId");

                    b.ToTable("Billing");

                    b.HasData(
                        new
                        {
                            Id = new Guid("10b9038a-55b4-4856-814c-af6b73b953a3"),
                            BillingDate = new DateTime(2024, 2, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DueDate = new DateTime(2024, 2, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsPaid = true,
                            PaymentMethod = "Credit Card",
                            TotalAmount = 29.99m,
                            UserId = "25f87c58-9061-4bb7-aa3a-4a05177481d2",
                            UserPlanId = new Guid("93e289fa-ffa4-484b-b66e-7df8078f9ed5")
                        },
                        new
                        {
                            Id = new Guid("37793a91-ef37-44fc-a4d2-deda54978771"),
                            BillingDate = new DateTime(2024, 3, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DueDate = new DateTime(2024, 3, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsPaid = true,
                            PaymentMethod = "Credit Card",
                            TotalAmount = 29.99m,
                            UserId = "25f87c58-9061-4bb7-aa3a-4a05177481d2",
                            UserPlanId = new Guid("93e289fa-ffa4-484b-b66e-7df8078f9ed5")
                        },
                        new
                        {
                            Id = new Guid("de82277b-da8b-45b5-871d-31e0e122c417"),
                            BillingDate = new DateTime(2024, 4, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DueDate = new DateTime(2024, 4, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsPaid = false,
                            PaymentMethod = "Credit Card",
                            TotalAmount = 29.99m,
                            UserId = "25f87c58-9061-4bb7-aa3a-4a05177481d2",
                            UserPlanId = new Guid("93e289fa-ffa4-484b-b66e-7df8078f9ed5")
                        },
                        new
                        {
                            Id = new Guid("0d596d9b-b24d-4171-9bf3-37730511c383"),
                            BillingDate = new DateTime(2024, 2, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DueDate = new DateTime(2024, 2, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsPaid = true,
                            PaymentMethod = "ACH",
                            TotalAmount = 69.99m,
                            UserId = "538091ec-802c-460d-a56e-8ce2414782b2",
                            UserPlanId = new Guid("d1e5f1d3-d768-403c-9431-564e9cbe84bf")
                        },
                        new
                        {
                            Id = new Guid("b7f5b338-7d47-4192-a891-c050c2f1b036"),
                            BillingDate = new DateTime(2024, 3, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DueDate = new DateTime(2024, 3, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsPaid = true,
                            PaymentMethod = "Credit Card",
                            TotalAmount = 69.99m,
                            UserId = "538091ec-802c-460d-a56e-8ce2414782b2",
                            UserPlanId = new Guid("d1e5f1d3-d768-403c-9431-564e9cbe84bf")
                        },
                        new
                        {
                            Id = new Guid("82923e85-6c1d-4924-b5c3-9094d6dc69c0"),
                            BillingDate = new DateTime(2024, 4, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DueDate = new DateTime(2024, 4, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsPaid = true,
                            PaymentMethod = "Debit Card",
                            TotalAmount = 69.99m,
                            UserId = "538091ec-802c-460d-a56e-8ce2414782b2",
                            UserPlanId = new Guid("d1e5f1d3-d768-403c-9431-564e9cbe84bf")
                        },
                        new
                        {
                            Id = new Guid("483384d2-adf3-41cd-8a2b-2d6eb5fee892"),
                            BillingDate = new DateTime(2024, 2, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DueDate = new DateTime(2024, 2, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsPaid = true,
                            PaymentMethod = "ACH",
                            TotalAmount = 99.99m,
                            UserId = "3f86cc51-c688-42de-aa44-d35c5db73bc4",
                            UserPlanId = new Guid("f512ba58-cc89-49f5-8489-367865917a8b")
                        },
                        new
                        {
                            Id = new Guid("2bbd7774-7098-48b4-91a4-91f144c014ba"),
                            BillingDate = new DateTime(2024, 3, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DueDate = new DateTime(2024, 3, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsPaid = true,
                            PaymentMethod = "ACH",
                            TotalAmount = 99.99m,
                            UserId = "3f86cc51-c688-42de-aa44-d35c5db73bc4",
                            UserPlanId = new Guid("f512ba58-cc89-49f5-8489-367865917a8b")
                        },
                        new
                        {
                            Id = new Guid("8de7b685-c1ed-4076-86b5-2b53729125bb"),
                            BillingDate = new DateTime(2024, 4, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DueDate = new DateTime(2024, 4, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsPaid = false,
                            PaymentMethod = "ACH",
                            TotalAmount = 99.99m,
                            UserId = "3f86cc51-c688-42de-aa44-d35c5db73bc4",
                            UserPlanId = new Guid("f512ba58-cc89-49f5-8489-367865917a8b")
                        },
                        new
                        {
                            Id = new Guid("b0addc25-e209-4c25-a047-2790b6a61773"),
                            BillingDate = new DateTime(2024, 2, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DueDate = new DateTime(2024, 2, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsPaid = true,
                            PaymentMethod = "Debit card",
                            TotalAmount = 29.99m,
                            UserId = "838cb215-63f4-4880-bc9e-f0367316183a",
                            UserPlanId = new Guid("d80449d6-cabf-4bae-b7b8-1888ac1caab9")
                        },
                        new
                        {
                            Id = new Guid("f4174a89-990c-4215-81a8-f1443af92783"),
                            BillingDate = new DateTime(2024, 3, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DueDate = new DateTime(2024, 3, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsPaid = true,
                            PaymentMethod = "ACH",
                            TotalAmount = 29.99m,
                            UserId = "838cb215-63f4-4880-bc9e-f0367316183a",
                            UserPlanId = new Guid("d80449d6-cabf-4bae-b7b8-1888ac1caab9")
                        },
                        new
                        {
                            Id = new Guid("910e95c6-6ea6-476c-9b97-02fc31e01267"),
                            BillingDate = new DateTime(2024, 4, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DueDate = new DateTime(2024, 4, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsPaid = true,
                            PaymentMethod = "ACH",
                            TotalAmount = 29.99m,
                            UserId = "838cb215-63f4-4880-bc9e-f0367316183a",
                            UserPlanId = new Guid("d80449d6-cabf-4bae-b7b8-1888ac1caab9")
                        });
                });

            modelBuilder.Entity("Entities.Device", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("DeviceId");

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Manufacturer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Model")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PictureUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Storage")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Devices");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cde3cf86-46fb-40b3-bd45-e64171469e9b"),
                            Color = "Black",
                            Manufacturer = "Apple",
                            Model = "iPhone 15 Plus",
                            PictureUrl = "https://ss7.vzw.com/is/image/VerizonWireless/apple-iphone-15-plus-128gb-black-mtxr3ll-a-a?wid=930&hei=930&fmt=webp",
                            Storage = "64GB"
                        },
                        new
                        {
                            Id = new Guid("7b483b60-90e2-4c89-836c-4ad8946b8aa7"),
                            Color = "Titanium Grey",
                            Manufacturer = "Samsung",
                            Model = "Galaxy S24 Ultra",
                            PictureUrl = "https://ss7.vzw.com/is/image/VerizonWireless/samsung-eureka-e3-titaniumgray?wid=930&hei=930&fmt=webp",
                            Storage = "128GB"
                        },
                        new
                        {
                            Id = new Guid("f5222ea1-947e-45c1-a59a-a5a6e296b902"),
                            Color = "Blue",
                            Manufacturer = "Apple",
                            Model = "iPhone 15",
                            PictureUrl = "https://ss7.vzw.com/is/image/VerizonWireless/apple-iphone-15-128gb-blue-prepaid-mtpm3ll-a-a?wid=930&hei=930&fmt=webp",
                            Storage = "256GB"
                        },
                        new
                        {
                            Id = new Guid("97a612e4-13d6-43c0-805b-30fafa1ae05a"),
                            Color = "Bay",
                            Manufacturer = "Google",
                            Model = "Pixel 8 Pro",
                            PictureUrl = "https://ss7.vzw.com/is/image/VerizonWireless/google-husky-bay-2023?wid=930&hei=930&fmt=webp",
                            Storage = "128GB"
                        },
                        new
                        {
                            Id = new Guid("4f05e337-e657-4848-9efe-8b291bf18f1f"),
                            Color = "Lemongrass",
                            Manufacturer = "Google",
                            Model = "Pixel 7",
                            PictureUrl = "https://ss7.vzw.com/is/image/VerizonWireless/google-pixel-7-lemongrass-128-gb-ga03543-us?wid=930&hei=930&fmt=webp",
                            Storage = "256GB"
                        },
                        new
                        {
                            Id = new Guid("88ca3741-b8f4-44f6-baef-059389a34907"),
                            Color = "Starlight",
                            Manufacturer = "Apple",
                            Model = "iPhone 13",
                            PictureUrl = "https://ss7.vzw.com/is/image/VerizonWireless/apple-iphone-13-starlight-09142021?wid=930&hei=930&fmt=webp",
                            Storage = "64GB"
                        },
                        new
                        {
                            Id = new Guid("6488bdee-e52c-442a-b754-8a8f6c0e5ce0"),
                            Color = "Magenta",
                            Manufacturer = "Motorola",
                            Model = "Razr Plus",
                            PictureUrl = "https://cdn.tmobile.com/content/dam/t-mobile/en-p/cell-phones/Motorola/Motorola-razr-Plus-2023/Viva-Magenta/Motorola-razr-Plus-2023-Viva-Magenta-frontimage.png",
                            Storage = "128GB"
                        },
                        new
                        {
                            Id = new Guid("86a2e9d1-881f-4aba-ba25-e563b460a97a"),
                            Color = "Blue",
                            Manufacturer = "Samsung",
                            Model = "iPhone 15 Plus",
                            PictureUrl = "https://pisces.bbystatic.com/image2/BestBuy_US/images/products/6525/6525390_sd.jpg;maxHeight=640;maxWidth=550",
                            Storage = "128GB"
                        },
                        new
                        {
                            Id = new Guid("913cdb0e-2618-4c30-b760-0a78857eb0dd"),
                            Color = "Blue",
                            Manufacturer = "Apple",
                            Model = "iPhone 12",
                            PictureUrl = "https://ss7.vzw.com/is/image/VerizonWireless/apple-iphone-12-blue-10132020?wid=930&hei=930&fmt=webp",
                            Storage = "128GB"
                        },
                        new
                        {
                            Id = new Guid("baf6fd9a-ee78-4512-b298-03bd824f3fbd"),
                            Color = "Purple",
                            Manufacturer = "Samsung",
                            Model = "Galaxy S21+",
                            PictureUrl = "https://www.backmarket.com/cdn-cgi/image/format%3Dauto%2Cquality%3D75%2Cwidth%3D640/https://d2e6ccujb3mkqf.cloudfront.net/375691a8-f3d2-40ab-9bb8-7a187fa42f13-1_3230d8e7-e02d-4da1-bf4b-b3d2d1c889b9.jpg",
                            Storage = "512GB"
                        });
                });

            modelBuilder.Entity("Entities.PhonePlan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("PlanId");

                    b.Property<int>("DeviceLimit")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("money");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PhonePlans");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f6daf5fa-75fc-485a-8b6d-388e4132cfcc"),
                            DeviceLimit = 1,
                            Price = 29.99m,
                            Title = "Basic Plan"
                        },
                        new
                        {
                            Id = new Guid("23d7dc69-ff2f-42e9-92d5-20aebbb0747f"),
                            DeviceLimit = 3,
                            Price = 69.99m,
                            Title = "Premium Plan"
                        },
                        new
                        {
                            Id = new Guid("1d5cc690-684b-4dc4-b4ac-1bdf90c97839"),
                            DeviceLimit = 5,
                            Price = 99.99m,
                            Title = "Family Plan"
                        });
                });

            modelBuilder.Entity("Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "25f87c58-9061-4bb7-aa3a-4a05177481d2",
                            AccessFailedCount = 0,
                            Address = "123 Main St",
                            ConcurrencyStamp = "c632f93b-a48d-4781-af4d-768537477f75",
                            Email = "john.doe@example.com",
                            EmailConfirmed = false,
                            FirstName = "John",
                            LastName = "Doe",
                            LockoutEnabled = false,
                            PasswordHash = "password1",
                            PhoneNumberConfirmed = false,
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SecurityStamp = "35d112cd-99b4-42bf-a534-3ae66f6d03c7",
                            TwoFactorEnabled = false,
                            UserName = "johndoe"
                        },
                        new
                        {
                            Id = "538091ec-802c-460d-a56e-8ce2414782b2",
                            AccessFailedCount = 0,
                            Address = "456 Elm St",
                            ConcurrencyStamp = "76927ff1-1ab0-4037-8dcd-6283345babc1",
                            Email = "jane.smith@example.com",
                            EmailConfirmed = false,
                            FirstName = "Jane",
                            LastName = "Smith",
                            LockoutEnabled = false,
                            PasswordHash = "password2",
                            PhoneNumberConfirmed = false,
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SecurityStamp = "468d0969-b24e-465c-b228-2c55fc2c563d",
                            TwoFactorEnabled = false,
                            UserName = "janesmith"
                        },
                        new
                        {
                            Id = "3f86cc51-c688-42de-aa44-d35c5db73bc4",
                            AccessFailedCount = 0,
                            Address = "789 Loon St",
                            ConcurrencyStamp = "ec896075-8c94-4688-a8a6-0c8fe966f529",
                            Email = "elmer.fudd@example.com",
                            EmailConfirmed = false,
                            FirstName = "Elmer",
                            LastName = "Fudd",
                            LockoutEnabled = false,
                            PasswordHash = "password3",
                            PhoneNumberConfirmed = false,
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SecurityStamp = "27564a77-7fd0-4310-b8a2-cd9d7d868666",
                            TwoFactorEnabled = false,
                            UserName = "elmerfudd"
                        },
                        new
                        {
                            Id = "838cb215-63f4-4880-bc9e-f0367316183a",
                            AccessFailedCount = 0,
                            Address = "1270 Main St",
                            ConcurrencyStamp = "2e13608d-4f8d-4271-94f6-917ac24e2609",
                            Email = "sample@sample.com",
                            EmailConfirmed = false,
                            FirstName = "Wesley",
                            LastName = "Edwards",
                            LockoutEnabled = false,
                            PasswordHash = "Govols94!@",
                            PhoneNumberConfirmed = false,
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SecurityStamp = "ab616d99-0a54-45dc-9ea1-bcf302d61e84",
                            TwoFactorEnabled = false,
                            UserName = "wredwards"
                        });
                });

            modelBuilder.Entity("Entities.UserDevice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ActivationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeviceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UserPlanId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId");

                    b.HasIndex("UserPlanId");

                    b.ToTable("UserDevices");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ac3f3dc7-ebb4-4f8d-907b-c45f71a8d9a5"),
                            ActivationDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeviceId = new Guid("cde3cf86-46fb-40b3-bd45-e64171469e9b"),
                            PhoneNumber = "2629423847",
                            UserId = "25f87c58-9061-4bb7-aa3a-4a05177481d2",
                            UserPlanId = new Guid("93e289fa-ffa4-484b-b66e-7df8078f9ed5")
                        },
                        new
                        {
                            Id = new Guid("18d346f8-edcc-4700-ab34-4518cd044674"),
                            ActivationDate = new DateTime(2024, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeviceId = new Guid("7b483b60-90e2-4c89-836c-4ad8946b8aa7"),
                            PhoneNumber = "7187624769",
                            UserId = "538091ec-802c-460d-a56e-8ce2414782b2",
                            UserPlanId = new Guid("d1e5f1d3-d768-403c-9431-564e9cbe84bf")
                        },
                        new
                        {
                            Id = new Guid("022ae233-4d11-40d3-8170-1b034022eb57"),
                            ActivationDate = new DateTime(2024, 3, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeviceId = new Guid("f5222ea1-947e-45c1-a59a-a5a6e296b902"),
                            PhoneNumber = "3036313605",
                            UserId = "538091ec-802c-460d-a56e-8ce2414782b2",
                            UserPlanId = new Guid("d1e5f1d3-d768-403c-9431-564e9cbe84bf")
                        },
                        new
                        {
                            Id = new Guid("5c38b804-3093-4c05-95c9-79caae650e15"),
                            ActivationDate = new DateTime(2023, 8, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeviceId = new Guid("97a612e4-13d6-43c0-805b-30fafa1ae05a"),
                            PhoneNumber = "8472898809",
                            UserId = "3f86cc51-c688-42de-aa44-d35c5db73bc4",
                            UserPlanId = new Guid("f512ba58-cc89-49f5-8489-367865917a8b")
                        },
                        new
                        {
                            Id = new Guid("0cf43dcb-563d-4707-b2b3-7f6ff4d69f7f"),
                            ActivationDate = new DateTime(2024, 3, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeviceId = new Guid("4f05e337-e657-4848-9efe-8b291bf18f1f"),
                            PhoneNumber = "2085544516",
                            UserId = "3f86cc51-c688-42de-aa44-d35c5db73bc4",
                            UserPlanId = new Guid("f512ba58-cc89-49f5-8489-367865917a8b")
                        },
                        new
                        {
                            Id = new Guid("d80449d6-cabf-4bae-b7b8-1888ac1caab9"),
                            ActivationDate = new DateTime(2024, 2, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeviceId = new Guid("88ca3741-b8f4-44f6-baef-059389a34907"),
                            PhoneNumber = "7712780071",
                            UserId = "3f86cc51-c688-42de-aa44-d35c5db73bc4",
                            UserPlanId = new Guid("f512ba58-cc89-49f5-8489-367865917a8b")
                        },
                        new
                        {
                            Id = new Guid("a0cc4966-7605-4bc1-90db-286cfa367006"),
                            ActivationDate = new DateTime(2024, 2, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeviceId = new Guid("88ca3741-b8f4-44f6-baef-059389a34907"),
                            PhoneNumber = "5556869009",
                            UserId = "838cb215-63f4-4880-bc9e-f0367316183a",
                            UserPlanId = new Guid("d80449d6-cabf-4bae-b7b8-1888ac1caab9")
                        });
                });

            modelBuilder.Entity("Entities.UserPlan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PlanId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("PlanId");

                    b.HasIndex("UserId");

                    b.ToTable("UserPlans");

                    b.HasData(
                        new
                        {
                            Id = new Guid("93e289fa-ffa4-484b-b66e-7df8078f9ed5"),
                            PlanId = new Guid("f6daf5fa-75fc-485a-8b6d-388e4132cfcc"),
                            UserId = "25f87c58-9061-4bb7-aa3a-4a05177481d2"
                        },
                        new
                        {
                            Id = new Guid("d1e5f1d3-d768-403c-9431-564e9cbe84bf"),
                            PlanId = new Guid("23d7dc69-ff2f-42e9-92d5-20aebbb0747f"),
                            UserId = "538091ec-802c-460d-a56e-8ce2414782b2"
                        },
                        new
                        {
                            Id = new Guid("f512ba58-cc89-49f5-8489-367865917a8b"),
                            PlanId = new Guid("1d5cc690-684b-4dc4-b4ac-1bdf90c97839"),
                            UserId = "3f86cc51-c688-42de-aa44-d35c5db73bc4"
                        },
                        new
                        {
                            Id = new Guid("d80449d6-cabf-4bae-b7b8-1888ac1caab9"),
                            PlanId = new Guid("f6daf5fa-75fc-485a-8b6d-388e4132cfcc"),
                            UserId = "838cb215-63f4-4880-bc9e-f0367316183a"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "19b26bf4-8508-445d-97bc-423a5b0e357e",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Entities.Billing", b =>
                {
                    b.HasOne("Entities.UserPlan", "UserPlan")
                        .WithMany("Bills")
                        .HasForeignKey("UserPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserPlan");
                });

            modelBuilder.Entity("Entities.UserDevice", b =>
                {
                    b.HasOne("Entities.Device", "Device")
                        .WithMany()
                        .HasForeignKey("DeviceId");

                    b.HasOne("Entities.UserPlan", null)
                        .WithMany("Devices")
                        .HasForeignKey("UserPlanId");

                    b.Navigation("Device");
                });

            modelBuilder.Entity("Entities.UserPlan", b =>
                {
                    b.HasOne("Entities.PhonePlan", "Plan")
                        .WithMany()
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.User", null)
                        .WithMany("UserPlans")
                        .HasForeignKey("UserId");

                    b.Navigation("Plan");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.User", b =>
                {
                    b.Navigation("UserPlans");
                });

            modelBuilder.Entity("Entities.UserPlan", b =>
                {
                    b.Navigation("Bills");

                    b.Navigation("Devices");
                });
#pragma warning restore 612, 618
        }
    }
}
